/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xuartps.h"
#include "xil_printf.h"

#define UART_DEVICE_ID      XPAR_XUARTPS_0_DEVICE_ID
#define HDMI_PATTERN_REG    ((volatile u32*) 0x40000000)
#define HDMI_COLOR_REG      ((volatile u32*) 0x40000004)

XUartPs Uart_Ps;

void show_menu() {
    xil_printf("\r\n=== Menú de Control HDMI ===\r\n");
    usleep(50000);
    xil_printf("1: Cambiar a patrón de color ROJO\r\n");
    usleep(50000);
    xil_printf("2: Cambiar a patrón de color VERDE\r\n");
    usleep(50000);
    xil_printf("3: Cambiar a patrón de color AZUL\r\n");
    usleep(50000);
    xil_printf("4: Cambiar a patrón AMARILLO\r\n");
    usleep(50000);
    xil_printf("5: Cambiar color manual (hex)\r\n");
    usleep(50000);
    xil_printf("r: Resetear a patrón inicial\r\n");
    usleep(50000);
    xil_printf("=============================\r\n");
    usleep(50000);
    xil_printf("Seleccione una opción: ");
}

int main() {
    XUartPs_Config *Config;
    u8 ch;

    // Inicialización UART
    Config = XUartPs_LookupConfig(UART_DEVICE_ID);
    XUartPs_CfgInitialize(&Uart_Ps, Config, Config->BaseAddress);
    XUartPs_SetBaudRate(&Uart_Ps, 115200);

    // Desactiva buffering para evitar pérdida de texto en xil_printf
    setvbuf(stdout, NULL, _IONBF, 0);

    show_menu();

    while (1) {
        // Espera BLOQUEANTE hasta que se recibe un carácter
        ch = XUartPs_RecvByte(Uart_Ps.Config.BaseAddress);

        switch (ch) {
            case '1':
//                *HDMI_PATTERN_REG = 0x01;
//                *HDMI_COLOR_REG = 0xFF0000;
                xil_printf("\r\nPatrón: ROJO\r\n");
                break;
            case '2':
//                *HDMI_PATTERN_REG = 0x01;
//                *HDMI_COLOR_REG = 0x00FF00;
                xil_printf("\r\nPatrón: VERDE\r\n");
                break;
            case '3':
//                *HDMI_PATTERN_REG = 0x01;
//                *HDMI_COLOR_REG = 0x0000FF;
                xil_printf("\r\nPatrón: AZUL\r\n");
                break;
            case '4':
//                *HDMI_PATTERN_REG = 0x01;
//                *HDMI_COLOR_REG = 0xFFFF00;
                xil_printf("\r\nPatrón: AMARILLO\r\n");
                break;
            case '5':
//                *HDMI_PATTERN_REG = 0x01;
//                *HDMI_COLOR_REG = 0x3366FF;
                xil_printf("\r\nColor manual: 0x3366FF\r\n");
                break;
            case 'r':
//                *HDMI_PATTERN_REG = 0x00;
//                *HDMI_COLOR_REG = 0x000000;
                xil_printf("\r\nSistema reiniciado\r\n");
                break;
            default:
                xil_printf("\r\nOpción no válida\r\n");
                show_menu();

                break;
        }

        usleep(200000); // espera corta para que el UART termine de transmitir
    }

    return 0;
}
